import gspread
from time import time
import logging
import pandas as pd
from datetime import datetime
from dotenv import load_dotenv
import os
import requests
import json

def safe_open_spreadsheet(title, retries=5, delay=5):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ APIError 503.
    """
    gc = gspread.service_account(filename='creds.json')
    for attempt in range(1, retries + 1):
        print(f"[–ü–æ–ø—ã—Ç–∫–∞ {attempt} –æ–∫—Ç—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ")
        try:
            return gc.open(title)
        except APIError as e:
            if "503" in str(e):
                print(f"[–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}] APIError 503 ‚Äî –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
                time.sleep(delay)
            else:
                raise  # –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ 503 ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É '{title}' –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫.")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('cometa_change_settings_dashboard.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def main():
    logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞")
    print('–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ üåå')

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = safe_open_spreadsheet("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∞–º–∏ –í–µ–∫—Ç–æ—Ä")
    sheet = table.worksheet("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞").get_all_values()
    df_settings = pd.DataFrame(sheet[1:], columns=sheet[0])
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(df_settings)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã")
    print(f'–¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞')

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    df_settings = df_settings.rename(columns={
        '–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —é—Ä–ª–∏—Ü–∞': 'api_key_id',
        '–ê—Ä—Ç–∏–∫—É–ª': 'product_id',
        '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 'active',
        '–î–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –î–†–†': 'target_drr_date',
        '–¶–µ–ª–µ–≤–æ–π –î–†–†': 'target_drr',
        '–î–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π —Ä–∞—Å—Ö–æ–¥': 'target_cost_date',
        '–¶–µ–ª–µ–≤–æ–π —Ä–∞—Å—Ö–æ–¥': 'target_cost_override',
        '–†–∞–∑–º–µ—Ä': 'size',
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'quantity',
        '–°—á–µ—Ç –∞–≤—Ç–æ–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è': 'deposit_type',
        '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥': 'min_daily_cost',
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥': 'max_daily_cost'
    })

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
    def to_int_or_none(x):
        x = str(x).strip()
        return int(x) if x and x != 'nan' else None

    def to_float_or_none(x):
        x = str(x).replace(',', '.').strip()
        return float(x) if x and x != 'nan' else None

    def to_bool_or_none(x):
        return True if str(x).strip() == '1' else (False if str(x).strip() == '0' else None)

    def to_iso_date(date_str):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç '24.06.2025' –∏–ª–∏ '2025-06-24' –≤ '2025-06-24'
        if not date_str or pd.isna(date_str):
            return None
        try:
            # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            return datetime.strptime(date_str, "%Y-%m-%d").strftime("%Y-%m-%d")
        except ValueError:
            try:
                return datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d")
            except ValueError:
                return None

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params = []
    for _, row in df_settings.iterrows():
        obj = {
            "api_key_id": to_int_or_none(row['api_key_id']),
            "product_id": to_int_or_none(row['product_id']),
            "active": to_bool_or_none(row['active']),
            "target_drr": (
                [{"date": to_iso_date(row['target_drr_date']), "drr": to_float_or_none(row['target_drr'])}]
                if pd.notna(row['target_drr']) and pd.notna(row['target_drr_date']) else []
            ),
            "target_cost_override": (
                [{"date": to_iso_date(row['target_cost_date']), "cost": to_float_or_none(row['target_cost_override'])}]
                if pd.notna(row['target_cost_override']) and pd.notna(row['target_cost_date']) else []
            ),
            "min_rem": (
                [{"quantity": to_int_or_none(row['quantity']), "size": str(row['size'])}]
                if pd.notna(row['quantity']) and pd.notna(row['size']) else []
            ),
            "deposit_type": (
                [row['deposit_type']] if pd.notna(row['deposit_type']) else []
            ),
            "min_daily_cost": to_int_or_none(row['min_daily_cost']),
            "max_daily_cost": to_int_or_none(row['max_daily_cost'])
        }
        params.append(obj)
    logger.info("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

    final_params = []
    for param in params:
        target_cost = None
        if param['target_cost_override'] and len(param['target_cost_override']) > 0:
            target_cost = param['target_cost_override'][0].get('cost')

        target_drr = None
        if param['target_drr'] and len(param['target_drr']) > 0:
            target_drr = param['target_drr'][0].get('drr')

        # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö
        if (
            param['max_daily_cost'] is None
            and param['min_daily_cost'] is None
            and target_cost is None
            and target_drr is None
            and param['active'] is not False
        ):
            print(f"–£–¥–∞–ª—ë–Ω product_id: {param['product_id']}")
        else:
            final_params.append(param)

    for p in final_params:
        # –ß–∏—Å—Ç–∏–º target_drr
        if not p['target_drr'] or all((not i['date'] or i['drr'] is None) for i in p['target_drr']):
            p['target_drr'] = None

        # –ß–∏—Å—Ç–∏–º target_cost_override
        if not p['target_cost_override'] or all((not i['date'] or i['cost'] is None) for i in p['target_cost_override']):
            p['target_cost_override'] = None

        # –ß–∏—Å—Ç–∏–º min_rem
        if not p['min_rem'] or not isinstance(p['min_rem'], list) or p['min_rem'][0].get('quantity') is None:
            p['min_rem'] = None

        # –ß–∏—Å—Ç–∏–º deposit_type
        if not p['deposit_type'] or all(d not in ['account', 'net', 'bonus'] for d in p['deposit_type']):
            p['deposit_type'] = None
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ö–æ–º–µ—Ç—É {final_params}")

    load_dotenv()
    cometa_api_key = os.getenv('COMETA_API_KEY') 
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    url_change_settings = 'https://api.e-comet.io/v1/autopilots'
    headers = {'Authorization': cometa_api_key}

    print('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ö–æ–º–µ—Ç—É')
    max_attempts = 10
    attempts = 0
    success = False
    while attempts != max_attempts and not success:
        try:
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –≤ –ö–æ–º–µ—Ç—É")
            response = requests.post(url_change_settings, headers=headers, json=final_params)
            if response.status_code == 200:
                print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:", response.json())
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:{response.json()} {(datetime.now()).strftime('%Y-%m-%d-%H-%M')}")
                success = True
            elif response.status_code == 422:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
                logger.warning(f"–û—à–∏–±–∫–∞ 422. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π. {response.text}")
                attempts += 1
            elif response.status_code == 401:
                print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á.")
                logger.warning(f"–û—à–∏–±–∫–∞ 401. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á.{response.text}")
            elif response.status_code == 403:
                print("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                logger.warning(f"–û—à–∏–±–∫–∞ 403. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.{response.text}")
            elif response.status_code >= 500:
                print("–û—à–∏–±–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.warning(f"–û—à–∏–±–∫–∞ 500. –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.{response.text}")
                attempts += 1
            elif response.status_code == 400:
                print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.")
                error_data = response.json()
                if error_data:
                    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ—à–∏–±–∫–∏
                    not_found_article = int(error_data['detail'].split(': ')[1])
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å —ç—Ç–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏–∑ final_params
                    final_params = [item for item in final_params if item.get('product_id') != not_found_article]
                logger.warning(f"–û—à–∏–±–∫–∞ 400. {response.text}")
            else:
                print(f"–û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ {response.status_code}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
                logger.warning(f"–û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ {response.status_code}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                
        except requests.exceptions.ConnectionError:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.")
            logger.warning(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        except requests.exceptions.Timeout:
            print("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.warning(f"–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        except requests.exceptions.RequestException as e:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            logger.warning(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        except json.JSONDecodeError:
            print("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")
            logger.warning(f"–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
        except Exception as e:
            print("–û—à–∏–±–∫–∞: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            logger.warning(f"–û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ {response.status_code}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
    print(f"–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ {(datetime.now()).strftime('%Y-%m-%d-%H-%M')}")